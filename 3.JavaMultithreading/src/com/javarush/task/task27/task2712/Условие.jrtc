<<<<<<< HEAD
taskKey="com.javarush.task.task27.task2712.big23"\n\nРесторан(23)

Это всё! Красоту можешь наводить самостоятельно.

Например:
1. Для трэдов обычно используют класс ThreadLocalRandom вместо Random. Отрефакторь код, замени Random на ThreadLocalRandom.
2. Сделай Waiter таском, чтобы он работал как трэд (убери Observer). Сделай очередь приготовленных заказов, официант пусть берет заказы из нее и относит на столы.
3. Запиши в ивент-лог событие NoAvailableVideoEventDataRow тогда, когда невозможно подобрать видео. Выдавай это событие директору.
4. Напиши UI, например, на Swing.

Твои достижения:
1. Разобрался с паттерном Observer.
2. Прокачал скилл написания рекурсии.
3. Познакомился с методом реализации ведения статистики.
4. Стал больше знать и уметь.
5. Увидел, как раскладывать задачу на подзадачи.
6. Продвинулся на шаг ближе к работе джава программистом.

Поздравляю!


Требования:
1.	Ты отлично поработал. Большая задача пройдена!


Ресторан(22)

К сожалению, заказы все еще не готовятся параллельно. Вот как работает наш трэд из предыдущего задания.
Он находит повара, потом находит заказ, отдает заказ повару методом startCookingOrder, потом ждет окончания приготовления,
и только после этого переходит к следующему заказу. Так происходит потому, что все действия внутри одного трэда -
последовательные. Мы не можем в пределах одного трэда выполнять параллельные процессы.
Нам нужна стандартная Producer-Consumer реализация.
RandomOrderGeneratorTask - у нас Producer, т.к. производит заказы
Cook - это Consumer, т.к. обрабатывает заказы

1. Перенеси поле-очередь из OrderManager в Restaurant, сделай ее приватной константой.
2. Добавь поле-очередь и сеттер в класс Cook, сразу после создания повара используя созданный сеттер установи ему
константу из п.1. в качестве значения для созданного поля.
3. Tablet - не должен быть Observable. Убери все зависимости.
4. В Tablet создай сеттер и установи ссылку на очередь (п.1) при создании планшета.
5. В Tablet часть логики, которая уведомляет Observer-а, замени на такую, которая добавляет заказ в очередь.

6. В методе main создай и запусти трэды на основании тасок Cook.
7. Из класса StatisticManager удали сет поваров, его геттер и метод register(Cook cook).
8. Сделай класс Cook - таском(Runnable). Перенеси логику из трэда внутри конструктора OrderManager в метод run класса Cook.
9. Удали класс OrderManager и в методе main исправь зависимость Observer-Observable.



Ресторан(21)

Продолжаем фиксить баг.

Сейчас все заказы поступают в очередь, но не доходят до поваров.
Сделаем так, чтобы OrderManager находил любого свободного повара и отдавал ему заказ. Для реализации данной логики
нам понадобится демон-трэд. Он будет проверять наличие заказов в очереди, брать свободных поваров и отдавать им заказы.

Нам понадобится метод, который определит, занят повар или нет.
1. В классе Cook создай поле boolean busy с геттером.
2. В начале метода startCookingOrder поставьте busy в true, а в конце метода в false.
3. В методе startCookingOrder сымитируй задержку при приготовлении блюда, поставь слип в 10-кратном размере от времени приготовления заказа.
Т.е. если заказ готовится 30 минут, то задержка будет 30*10 миллисекунд.
4. Чтобы получить список всех поваров, в классе StatisticManager добавь геттер для поля, которое заполняется в методе register(Cook cook).

5. В конструкторе OrderManager создай и запусти демон-трэд. Логика метода run:
каждые 10 миллисекунд проверять очередь. Если в очереди есть заказы, то найти свободных поваров и передать
им заказы (метод startCookingOrder), если нет свободных поваров или нет заказов в очереди, то ждать дальше.



Ресторан(20)

Фикс бага - планшет направляет свой заказ всем известным ему поварам.
Ожидаемое поведение: планшет направляет свой заказ в очередь, свободный повар берет заказы из очереди.

Есть два варианта реализации такого функционала:
1) Каждый планшет хранит ссылку на очередь и толкает в нее новый свой заказ.
2) Планшет толкает свой заказ в Observer, который хранит в себе ссылку на очередь. Observer заносит заказ в очередь.

Мы пойдем по второму пути.
1. В корне задачи-проекта создай класс OrderManager, который будет Observer для планшетов.
2. В классе OrderManager создай поле orderQueue типа LinkedBlockingQueue<Order>. В него складывай все заказы, поступающие в метод update.
3. Класс Cook теперь - НЕ Observer.
4. В классе Cook создай метод void startCookingOrder(Order order), в который перенеси логику из метода update.
5. Удали метод update из класса Cook.
6. В методе main расставь зависимость Observer-Observable в связи с вышеперечисленными изменениями.



Ресторан(19)

Нам осталось доделать метод main.

Сперва давай сравним параметры конструктора RandomOrderGeneratorTask.
Пожалуйста, сделай сигнатуру такой же, как у меня:
public RandomOrderGeneratorTask(List<Tablet> tablets, int interval)

В методе main:
1. Удали создание хардкоженного планшета и вызова его метода createOrder().
2. Создай второго повара.
3. Зарегистрируй поваров используя класс StatisticManager.
4. Для второго повара и всех планшетов расставь зависимость Observer-Observable.
5. Создай список объектов-планшетов 5 штук, инициализируйте его в цикле.
6. Создай и запустим трэд на основе объекта RandomOrderGeneratorTask.
7. Через секунду прерви его и посмотри на вывод в консоль.

Уупс, два повара готовят один и тот же заказ 8-О

Такой аутпут получился потому, что Observable информирует всех своих Observer-ов, т.е. планшет направляет свой заказ всем известным ему поварам.
Такое поведение нам не подходит, поэтому будем исправлять его в следующем задании.

P.S. Не забудь остановить тред!



Ресторан(18)

Сейчас у нас один планшет и 1 повар.
Давай создадим несколько планшетов, которые будут рандомно генерировать заказы, и сделаем два повара.

1. В классе Restaurant создай ПРИВАТНУЮ статическую константу int ORDER_CREATING_INTERVAL = 100.

2. В отдельном классе создай таск(Runnable) RandomOrderGeneratorTask. Этот таск должен:
2.1. Хранить список всех планшетов
2.2. Используя Math.random выбирать случайный планшет.
2.3. У RandomOrderGeneratorTask должен быть только один единственный метод.
2.4. Генерировать случайный заказ каждые ORDER_CREATING_INTERVAL миллисекунд для планшета из п.2.2. (не печатай стек-трейс)
Сейчас заказ создается в методе createOrder в классе Tablet.
В классе Tablet создай метод void createTestOrder() с похожей функциональностью,
который будет случайным образом генерировать заказ со случайными блюдами не общаясь с реальным человеком.
Все необходимые данные передай в конструкторе.
Подсказка:
а) создай класс TestOrder - наследник Order - в пакете родителя.
б) в классе Order создай protected метод initDishes(), в котором инициализируй dishes. Вызови этот метод в конструкторе
в) в классе Order сделай поле dishes protected
г) переопредели initDishes в классе-наследнике TestOrder. Сделай инициализацию случайным набором блюд.
д) вместо создания объекта Order в методе createTestOrder() класса Tablet, создавай объект класса TestOrder.
Весь другой функционал метода createTestOrder оставь прежним

3. Отрефакторь методы createTestOrder() и createOrder(): в одном из методов выдели код, который повторяется в обоих методах,
и нажми Ctrl+Alt+M, введи любое имя метода и нажми ОК. IDEA предложит заменить этот код во втором методе, подтверди.
=======
taskKey="com.javarush.task.task27.task2712.big18"\n\nРесторан(18)

Сейчас у нас один планшет и 1 повар.
Давай создадим несколько планшетов, которые будут рандомно генерировать заказы, и сделаем два повара.

1. В классе Restaurant создай ПРИВАТНУЮ статическую константу int ORDER_CREATING_INTERVAL = 100.

2. В отдельном классе создай таск(Runnable) RandomOrderGeneratorTask. Этот таск должен:
2.1. Хранить список всех планшетов
2.2. Используя Math.random выбирать случайный планшет.
2.3. У RandomOrderGeneratorTask должен быть только один единственный метод.
2.4. Генерировать случайный заказ каждые ORDER_CREATING_INTERVAL миллисекунд для планшета из п.2.2. (не печатай стек-трейс)
Сейчас заказ создается в методе createOrder в классе Tablet.
В классе Tablet создай метод void createTestOrder() с похожей функциональностью,
который будет случайным образом генерировать заказ со случайными блюдами не общаясь с реальным человеком.
Все необходимые данные передай в конструкторе.
Подсказка:
а) создай класс TestOrder - наследник Order - в пакете родителя.
б) в классе Order создай protected метод initDishes(), в котором инициализируй dishes. Вызови этот метод в конструкторе
в) в классе Order сделай поле dishes protected
г) переопредели initDishes в классе-наследнике TestOrder. Сделай инициализацию случайным набором блюд.
д) вместо создания объекта Order в методе createTestOrder() класса Tablet, создавай объект класса TestOrder.
Весь другой функционал метода createTestOrder оставь прежним

3. Отрефакторь методы createTestOrder() и createOrder(): в одном из методов выдели код, который повторяется в обоих методах,
и нажми Ctrl+Alt+M, введи любое имя метода и нажми ОК. IDEA предложит заменить этот код во втором методе, подтверди.


Требования:
1.	В классе Restaurant должна быть создана приватная статическая константа ORDER_CREATING_INTERVAL типа int со значением 100.
2.	Класс RandomOrderGeneratorTask должен быть реализован в соответствии с условием задачи.
3.	Класс TestOrder должен быть реализован в соответствии с условием задачи.
4.	В классе Order должен быть создан метод initDishes инициализирующий dishes.
5.	В конструкторе класса Order должен быть вызван метод initDishes.


Ресторан(17)

Реализуем третий и четвертый пункт статистики - список активных и неактивных роликов
Для этого проще использовать доступ к хранилищу рекламных роликов - класс AdvertisementStorage.
1. В пакете ad создай StatisticAdvertisementManager, который будет предоставлять информацию из AdvertisementStorage в нужном нам виде.
Сделай его синглтоном.

2. В классе StatisticAdvertisementManager создайте и проинициализируйте поле типа AdvertisementStorage.

3. В StatisticAdvertisementManager создай два(или один) метода (придумать самостоятельно), которые из хранилища
AdvertisementStorage достанут все необходимые данные - соответственно список активных и неактивных рекламных роликов.
Активным роликом считается тот, у которого есть минимум один доступный показ.
Неактивным роликом считается тот, у которого количество показов равно 0.

4. Реализуй логику методов printActiveVideoSet и printArchivedVideoSet в классе DirectorTablet.
Используй методы/метод, созданные в предыдущем пункте.
Сортировать по имени видео-ролика в алфавитном порядке
Сначала английские, потом русские.

Пример вывода для printActiveVideoSet:
First Video - 100
Second video - 10
Third Video - 2
четвертое видео - 4

Через 50 показов пример вывода для printArchivedVideoSet:
Second video
Third Video
четвертое видео



Ресторан(16)

Реализуем первый пункт статистики - какую сумму заработали на рекламе, сгруппировать по дням.

1. В классе VideoSelectedEventDataRow создай геттер для поля amount.
В классе CookedOrderEventDataRow создай геттер для поля cookName.

2. В StatisticManager создай метод (придумать самостоятельно), который из хранилища достанет все данные,
относящиеся к отображению рекламы, и посчитает общую прибыль за каждый день.
Дополнительно добавь вспомогательный метод get в класс хранилища, чтобы получить доступ к данным.

3. Начнем с логики метода printAdvertisementProfit в классе DirectorTablet.
Используя метод из предыдущего пункта вывести в консоль в убывающем порядке даты и суммы.
Для каждой даты из хранилища событий, для которой есть показанная реклама, должна выводится сумма прибыли за показы рекламы для этой даты.
В конце вывести слово Total и общую сумму.
Пример:
14-May-2013 - 2.50
13-May-2013 - 1.02
12-May-2013 - 543.98
Total - 547.50

4.Реализуем второй пункт статистики - загрузка (рабочее время) повара, сгруппировать по дням.

В StatisticManager создай метод (придумать самостоятельно), который из хранилища достанет все данные,
относящиеся к работе повара, и посчитает общую продолжительность работы для каждого повара отдельно.

5. Реализуем логику метода printCookWorkloading в классе DirectorTablet.
Используя метод из предыдущего пункта вывести в консоль в убывающем порядке даты, имена поваров и время работы в минутах (округлить в большую сторону).
Для каждой даты из хранилища событий, для которой есть запись о работе повара, должна выводится продолжительность работы в минутах для этой даты.
Если повар не работал в какой-то из дней, то с пустыми данными его НЕ выводить (см. 13-May-2013)
Поваров сортировать по имени
Пример:
14-May-2013
Ivanov - 60 min
Petrov - 35 min

13-May-2013
Ivanov - 129 min

12-May-2013
Ivanov - 6 min
Petrov - 5 min



Ресторан(15)

Давай подумаем что нужно сделать, чтобы директор мог посмотреть:
1) какую сумму заработали на рекламе, сгруппировать по дням;
2) загрузка (рабочее время) повара, сгруппировать по дням;
3) список активных роликов и оставшееся количество показов по каждому;
4) список неактивных роликов (с оставшемся количеством показов равным нулю).

Для каждого пункта добавим соответствующий метод в StatisticManager.
Директор будет вызывать метод, StatisticManager будет делать различные подсчеты.
Но директор должен из какого-то места вызвать эти методы. Дадим ему планшет, но с другим ПО.
Для этого создадим класс DirectorTablet, в котором будут дружелюбный интерфейс и возможность обращения к статистике.

1. В корне задачи-проекта создай класс DirectorTablet.

2. В классе DirectorTablet создай четыре void метода:
printAdvertisementProfit(), printCookWorkloading(), printActiveVideoSet(), printArchivedVideoSet()
Они соответствуют перечисленным четырем пунктам.

3. Чтобы можно было проверить результат, добавим в метод main создание директорского планшета и вывод статистики
с помощью методов перечисленных выше.

Нам понадобятся еще некоторые методы.
4. В EventDataRow создай методы:
Date getDate(), реализация которого вернет дату создания записи
int getTime(), реализация которого вернет время - продолжительность

5. В StatisticManager void register(Cook cook), который зарегистрирует полученного повара.
Создай в классе StatisticManager множество (Set) поваров (cooks) и добавь в него повара.

6. Реализуй необходимые геттеры у классов CookedOrderEventDataRow, NoAvailableVideoEventDataRow и VideoSelectedEventDataRow.



Ресторан(14)

1. Внутри StatisticStorage создай метод void put(EventDataRow data).

2. Чтобы методом put(EventDataRow data) добавить объект data в данные карты, нужен тип события - EventType.
Будет правильно, если событие будет хранить в себе свой тип. Поэтому:
2.1. В интерфейс EventDataRow добавь метод EventType getType()
2.2. Реализуй этот метод в каждом классе-событии: CookedOrderEventDataRow, NoAvailableVideoEventDataRow, VideoSelectedEventDataRow

3. Сделай так, чтобы к методу void put(EventDataRow data) нельзя было получить доступ за пределами класса StatisticManager.
Воспользуйся особенностями вложенных классов.

Теперь остается расставить вызовы StatisticManager в те места, которые генерируют события.

4. Зарегистрируй событие для повара во время приготовления еды.
Добавь геттер для поля dishes в класс Order, используйте его при создании события.

5. Зарегистрируй событие "видео выбрано" перед отображением рекламы пользователю.

6. Метод register с одним параметром типа EventDataRow должен регистрировать полученное событие в statisticStorage.



Ресторан(13)

Вернемся к методу register в классе StatisticManager. Он должен регистрировать события в хранилище.
Создадим хранилище :)
Хранилище связано 1 к 1 с менеджером, т.е. один менеджер и одно хранилище на приложение.
К хранилищу может доступиться только StatisticManager. Поэтому...
Из вышеперечисленного следует, что хранилище должно быть приватным иннер классом.
Назовем его StatisticStorage.

1. Внутри класса StatisticManager создать приватный иннер класс StatisticStorage.

2. Чтобы менеджер мог получить доступ к хранилищу, нужно в классе StatisticManager создать поле statisticStorage типа StatisticStorage.
Инициализируй его экземпляром класса.

3. StatisticStorage будет хранить данные внутри себя в виде мапы/словаря storage.
Связь StatisticStorage и Map должна быть has-a
Типы для мапы - <EventType, List<EventDataRow>>

4. В конструкторе StatisticStorage инициализируй хранилище данными по-умолчанию:
например используя цикл, для каждого EventType добавь new ArrayList<EventDataRow>()
>>>>>>> 868a4eae797161c67a4d9d5eb80d92a4e250d3d0



